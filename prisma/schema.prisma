generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//
enum Role {
  ADMIN
  MENTOR
  INTERN
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum ResourceCategory {
  DOCUMENT
  VIDEO
  LINK
  OTHER
}

//
// MODELS
//
model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  password      String?
  role          Role        @default(INTERN)
  isActive      Boolean     @default(true)
  emailVerified Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  tasksCreated  Task[]      @relation("TasksCreatedByMentor")
  tasksAssigned Task[]      @relation("TasksAssignedToIntern")
  resources     Resource[]
  notifications Notification[]
}

model Task {
  id            String       @id @default(cuid())
  title         String
  description   String?
  status        TaskStatus   @default(TODO)
  priority      TaskPriority @default(MEDIUM)
  dueDate       DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  createdById   String
  createdBy     User         @relation("TasksCreatedByMentor", fields: [createdById], references: [id])
  assignedToId  String
  assignedTo    User         @relation("TasksAssignedToIntern", fields: [assignedToId], references: [id])

  // AI review & feedback
  aiFeedback    String?
  aiScore       Float?
}

model Resource {
  id            String           @id @default(cuid())
  title         String
  url           String
  category      ResourceCategory @default(OTHER)
  uploadedAt    DateTime         @default(now())

  // Relations
  uploadedById  String
  uploadedBy    User             @relation(fields: [uploadedById], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
